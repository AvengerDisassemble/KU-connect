// ===============================
//  Prisma Schema for KU Connect
//  (Job Posting Feature Updated)
// ===============================

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

// Use SQLite for test/dev
datasource test_db {
  provider = "sqlite"
  url      = env("TEST_DATABASE_URL")
}

// Uncomment for production PostgreSQL
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// ------------------------------
//  ENUMS
// ------------------------------

enum Role {
  STUDENT
  PROFESSOR
  EMPLOYER
  ADMIN
}

enum Industry {
  IT_HARDWARE_AND_DEVICES
  IT_SOFTWARE
  IT_SERVICES
  NETWORK_SERVICES
  EMERGING_TECH
  E_COMMERCE
  OTHER
}

enum CompanySize {
  ONE_TO_TEN
  ELEVEN_TO_FIFTY
  FIFTY_ONE_TO_TWO_HUNDRED
  TWO_HUNDRED_PLUS
}

enum ResumeSource {
  PROFILE
  UPLOADED
}

enum ApplicationStatus {
  PENDING
  QUALIFIED
  REJECTED
}

// ------------------------------
//  MODELS
// ------------------------------

model User {
  id            String         @id @default(cuid())
  name          String
  surname       String
  password      String?
  email         String         @unique
  username      String?        @unique
  role          Role
  verified      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  professor     Professor?
  admin         Admin?
  student       Student?
  hr            HR?
  refreshTokens RefreshToken[]
  accounts     Account[]
  reports       JobReport[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Professor {
  id         String @id @default(cuid())
  userId     String @unique
  department String
  user       User   @relation(fields: [userId], references: [id])
}

model Admin {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Student {
  id                     String            @id @default(cuid())
  userId                 String            @unique
  user                   User              @relation(fields: [userId], references: [id])
  degreeType             DegreeType        @relation(fields: [degreeTypeId], references: [id])
  degreeTypeId           String
  address                String
  gpa                    Float?
  expectedGraduationYear Int?
  resumeKey              String?
  transcriptKey          String?
  verificationDocKey     String?
  interests              StudentInterest[]
  resumes                Resume[]
  applications           Application[]
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
}

model HR {
  id          String      @id @default(cuid())
  userId      String      @unique
  companyName String
  description String?
  address     String
  industry    Industry    @default(OTHER)
  companySize CompanySize @default(ONE_TO_TEN)
  website     String?
  verificationDocKey String?
  user        User        @relation(fields: [userId], references: [id])
  jobs        Job[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model DegreeType {
  id       String    @id @default(cuid())
  name     String    @unique
  students Student[]
}

// ------------------------------
//  JOB FEATURE MODELS
// ------------------------------

model Job {
  id                        String            @id @default(cuid())
  hrId                      String
  hr                        HR                @relation(fields: [hrId], references: [id])
  title                     String
  companyName               String
  description               String
  location                  String
  jobType                   String // internship, part-time, full-time, contract
  workArrangement           String // on-site, remote, hybrid
  duration                  String // e.g. 6-month, 1-year
  minSalary                 Int
  maxSalary                 Int
  application_deadline      DateTime
  email                     String?
  phone_number              String
  other_contact_information String?
  interests                 StudentInterest[]
  requirements              Requirement[]
  qualifications            Qualification[]
  responsibilities          Responsibility[]
  benefits                  Benefit[]
  tags                      Tag[]             @relation("JobTags")
  applications              Application[]
  resumes                   Resume[]
  reports                   JobReport[]
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
}

model Tag {
  id   String @id @default(cuid())
  name String @unique
  jobs Job[]  @relation("JobTags")
}

model Requirement {
  id    String @id @default(cuid())
  jobId String
  text  String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Qualification {
  id    String @id @default(cuid())
  jobId String
  text  String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Responsibility {
  id    String @id @default(cuid())
  jobId String
  text  String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Benefit {
  id    String @id @default(cuid())
  jobId String
  text  String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

// ------------------------------
//  APPLICATION & SUPPORT MODELS
// ------------------------------

model Application {
  id        String            @id @default(cuid())
  jobId     String
  studentId String
  resumeId  String?
  status    ApplicationStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  job     Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  resume  Resume? @relation(fields: [resumeId], references: [id])

  @@unique([jobId, studentId])
}

model JobReport {
  id        String   @id @default(cuid())
  jobId     String
  userId    String
  reason    String
  createdAt DateTime @default(now())

  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentInterest {
  id        String  @id @default(cuid())
  studentId String
  jobId     String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  job       Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
}
model Resume {
  @@unique([studentId, jobId])
  id           String        @id @default(cuid())
  studentId    String
  link         String
  student      Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  applications Application[]
  jobId        String
  job          Job           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  source       ResumeSource  @default(UPLOADED)
}
